#!/usr/bin/bash

USERXSESSION="$XDG_CACHE_HOME/X11/xsession"
USERXSESSIONRC="$XDG_CACHE_HOME/X11/xsessionrc"
ALTUSERXSESSION="$XDG_CACHE_HOME/X11/Xsession"
ERRFILE="$XDG_CACHE_HOME/X11/xsession-errors"

touchpad_setup() {
	xinput --set-prop "Elan Touchpad" 'libinput Accel Speed' 0
	xinput --set-prop "Elan Touchpad" "Device Accel Profile" 0

	xinput --set-prop "Elan Touchpad" "libinput Tapping Enabled" 1
	xinput --set-prop "Elan Touchpad" "libinput Middle Emulation Enabled" 1
	xinput --set-prop "Elan Touchpad" "libinput Disable While Typing Enabled" 1
	xinput --set-prop "Elan Touchpad" "libinput Natural Scrolling Enabled" 1 # Reverse scrolling
}

# xrandr --setprovideroutputsource modesetting NVIDIA-0
xrandr --auto

# NOTE(dparo): command nvidia-settings avoids alias expansion of the nvidia-settings
if [ -f "$XDG_CONFIG_HOME/nvidia/settings" ]; then
	command nvidia-settings --verbose --load-config-only --config "$XDG_CONFIG_HOME/nvidia/settings"
elif [ -f "$HOME/.nvidia-settings-rc" ]; then
	# Default place where nvidia-settings places the config file
	command nvidia-settings --verbose --load-config-only --config "$HOME/.nvidia-settings-rc"
fi

if [ "$HOST" = "dparo-pc" ]; then
	# NOTE(dparo): `-q/--query` or `-a/--assign` do not automatically
	#              update the ~/.nvidia-settings-rc config file
	# NOTE(dparo): run `nvidia-settings -q all` to show all available options

	# Set PowerMizerMode to prefer performance mode:
	#     When in Adaptive mode, the GPU automatically downclocks itself when there's little load,
	#     to reduce power consumption
	command nvidia-settings --verbose -a '[gpu:0]/GpuPowerMizerMode=1'
	command nvidia-settings --verbose -a 'AllowFlipping=1'
	command nvidia-settings --verbose -a 'CurrentMetaMode=nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }'
fi

[[ -f "/etc/X11/xinit/.Xresources" ]] && xrdb -merge "/etc/X11/xinit/.Xresources"
[[ -f "$XDG_CONFIG_HOME/X11/.Xresources" ]] && xrdb -merge "$XDG_CONFIG_HOME/X11/.Xresources"
[[ -f "/etc/X11/xinit/.Xmodmap" ]] && xmodmap "/etc/X11/xinit/.Xmodmap"
[[ -f "$XDG_CONFIG_HOME/X11/.Xmodmap" ]] && xmodmap "$XDG_CONFIG_HOME/X11/.Xmodmap"

# Set keyboard layout, and compose international chars with R-Alt
setxkbmap -layout us -option ctrl:nocaps,compose:ralt
# Restart Xorg server by using Ctrl + Alt + Backspace
setxkbmap -option terminate:ctrl_alt_bksp
xset -b # disable bell
xset r rate 300 30
touchpad_setup

xset s off # Disables screen saver
xset -dpms # Disables DPMS (Display Power Management Signaling)

xsetroot -solid darkgray
xsetroot -cursor_name left_ptr

if command -v numlockx >/dev/null 2>&1; then
	numlocx on
fi

# Automatic locking: https://github.com/google/xsecurelock
xset s 300 5
env XSECURELOCK_AUTH_TIMEOUT=20 XSECURELOCK_BLANK_TIMEOUT=2 XSECURELOCK_SHOW_DATETIME=1 XSECURELOCK_SHOW_HOSTNAME=1 XSECURELOCK_SHOW_USERNAME=1 \
	xss-lock -n /usr/lib/xsecurelock/dimmer -l -- xsecurelock &

# This two ENV vars are required if running `gnome-session` from this .xinitrc script
export XDG_SESSION_TYPE=x11
export GDK_BACKEND=x11

# For fixing libreoffice styling under non gnome desktop environments
export OOO_FORCE_DESKTOP="gnome"

# Source system-wide xinitrc dependencies
if [ -d /etc/X11/xinit/xinitrc.d ]; then
	for f in /etc/X11/xinit/xinitrc.d/?*.sh; do
		[ -f "$f" ] && source "$f"
	done
	unset f
fi

update-env() {
	##
	## The user instance of systemd does not inherit any of the environment variables set in places like .bashrc etc.
	##
	# NOTE(dparo): Use `systemctl --user show-environment` to dump
	#              all the environment variables visible from the user systemd's services.

	if command -v dbus-update-activation-environment >/dev/null 2>&1; then
		# NOTE(dparo): `dub-update-activation-environemnt --systemd`
		#              has the same effect as `systemctl --user import-environment`,
		#              but also affects the D-Bus session.
		# NOTE(dparo): You can use `--all` flags to import all environment variables from your shell
		#              You can list all the environment variables of your shell with `env`
		#

		# dbus-update-activation-environment is primarily designed to be used in Linux distributions'
		# X11 session startup scripts, in conjunction with the "user bus" design.
		# To propagate DISPLAY and XAUTHORITY to dbus-daemon and, if present, systemd,
		# and propagate DBUS_SESSION_BUS_ADDRESS to systemd:

		dbus-update-activation-environment --systemd "$@"
	else
		systemctl --user import-environment "$@"
	fi
}

update-env \
	DISPLAY XAUTHORITY \
	GNUPGHOME \
	XDG_DATA_HOME XDG_CONFIG_HOME XDG_CACHE_HOME XDG_STATE_HOME XDG_DATA_DIRS

# Import all environment variables, from the shell to the --user systemd level.
#    Usually it is overkill
if false; then
    systemctl --user import-environment
fi

if [ "$DBUS_SESSION_BUS_ADDRESS" = "" ]; then
	# NOTE(dparo): 30 June 2022
	#       - Ubuntu 22.04 fix for dbus and flatpak.
	#         In Arch Linux this variable is already exported in the shell env.
	#         However in Ubuntu this variable is not exported and it causes
	#         certain flatpak programs to not function since they cannot find the DBUS session
	#       - Ubuntu 22.04, Fixes GUI invocation for GPG password when git commit signing.
	#         If this variable is not exported in Ubuntu, git will request the GPG password in the terminal
	export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$UID/bus"
fi

exec_wm() {
	WM="$1"

	case "$WM" in
	bspwm | dwm | xmonad)
		export _JAVA_AWT_WM_NONREPARENTING=1
		export AWT_TOOLKIT=MToolkit
		;;
	*) ;;
	esac

	# NOTE(dparo): 27 Jan 2022
	#     dbus-launch is now deprecated, since it is now part of systemd
	#     and it is started automatically.
	#     Using dbus-launch would export DBUS_SESSION_BUS_ADDRESS to an invalid
	#     path, thus breaking normal keychain operations
	#
	#     ArchLinux: Do not use dbus-launch nor dbus-run-session !!!!!!!!!!!!
	#
	# NOTE(dparo): 29 April 2022
	#     From Ubuntu 22.04, running `dbus-launch --sh-syntax --exit-with-session "$WM"` is not anymore
	#     necessary. Running dbus-launch in this way would brake snap packages since they wouldn't
	#     be able to connect to the dbus socket
	#     Up to to Ubuntu 21.10 and before, `dbus-launch --sh-syntax --exit-with-session "$WM"`
	#     was necessary but nowadays it is not anymore
    exec systemctl --user start --wait "${WM}.service"
}


systemctl --user daemon-reload

## Try out different WMs using precedence and resolve the first installed
for WM in i3 bspwm dwm; do
	if type "$WM" 1>/dev/null 2>/dev/null; then
		exec_wm "$WM"
	fi
done
