---
# - name: Dependencies
#   ansible.builtin.package:
#     name:
#       - base-devel
#       - cmake
#       - curl
#       - ninja
#       - tree-sitter
#       - unzip
#     state: latest
#   become: true
#

- name: "Install build dependencies (See: https://github.com/neovim/neovim/wiki/Building-Neovim#ubuntu--debian)"
  ansible.builtin.apt:
    pkg:
      - ninja-build
      - gettext
      - libtool
      - libtool-bin
      - autoconf
      - automake
      - cmake
      - g++
      - pkg-config
      - unzip
      - curl
      - doxygen
  become: true
  tags:
    - neovim
    - apt

- name: Clone NEOVIM {{ neovim_version }}
  ansible.builtin.git:
    clone: yes
    depth: 1
    dest: "{{ ansible_user_dir }}/opt/github.com/neovim/neovim"
    force: yes
    repo: https://github.com/neovim/neovim.git
    single_branch: yes
    update: yes
    version: "{{ neovim_version | default('master') }}"
  register: clone
  tags:
    - neovim

- name: Build
  community.general.make:
    chdir: "{{ ansible_user_dir }}/opt/github.com/neovim/neovim"
    params:
      CMAKE_BUILD_TYPE: Release
  when: clone.changed
  tags:
    - neovim

- name: Install
  community.general.make:
    chdir: "{{ ansible_user_dir }}/opt/github.com/neovim/neovim"
    target: install
  become: true
  when: clone.changed
  tags:
    - neovim

- name: Remove build folder
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/opt/github.com/neovim/neovim/build"
    state: absent
  become: true
  tags:
    - neovim

- name: Install xclip
  ansible.builtin.apt:
    name: xclip
    state: present
  become: true
  tags:
    - neovim
    - apt

- name: Install xsel
  ansible.builtin.apt:
    name: xsel
    state: present
  become: true
  tags:
    - neovim
    - apt

- name: Install required providers - npm neovim
  community.general.npm:
    name: neovim
    state: latest
    global: true
  tags:
    - neovim

- name: Install required providers - pip3 pynvim
  ansible.builtin.pip:
    name: pynvim
    state: latest
  tags:
    - neovim

- name: Clean packer.nvim cache
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}.config/nvim/plugin/packer_compiled.lua"
    state: absent
  tags:
    - neovim

- name: Clone packer.nvim
  ansible.builtin.git:
    clone: yes
    depth: 1
    dest: "{{ ansible_user_dir }}/.local/share/nvim/site/pack/packer/start/packer.nvim"
    force: yes
    repo: https://github.com/wbthomason/packer.nvim
    single_branch: yes
    update: yes
  tags:
    - neovim
#
# - name: packer.nvim install plugins
#   ansible.builtin.shell: |
#     nvim --headless -c 'autocmd User PackerComplete quitall!' -c 'PackerSync'
#   tags:
#     - neovim
#
# - name: Update remote plugins
#   ansible.builtin.shell: |
#     nvim --headless -c 'UpdateRemotePlugins' -c qall
#   tags:
#     - neovim
#
# - name: Install lsp-servers, formatters, diagnostics tools
#   ansible.builtin.shell: |
#     nvim --headless -c "MasonInstall vim-language-server stylua lua-language-server" -c "qall"
#     nvim --headless -c "MasonInstall bash-language-server" -c "qall"
#     nvim --headless -c "MasonInstall pyright" -c "qall"
#     nvim --headless -c "MasonInstall rust-analyzer" -c "qall"
#     nvim --headless -c "MasonInstall shellcheck shellharden shfmt" -c "qall"
#     nvim --headless -c "MasonInstall typescript-language-server" -c "qall"
#     nvim --headless -c "MasonInstall eslint-lsp prettier" -c "qall"
#     nvim --headless -c "MasonInstall json-lsp yamllint yaml-language-server" -c "qall"
#     nvim --headless -c "MasonInstall texlab write-good proselint" -c "qall"
#     nvim --headless -c "MasonInstall sqlfluff" -c "qall"
#     nvim --headless -c "MasonInstall jdtls" -c "qall"
#     nvim --headless -c "MasonInstall ltex-ls" -c "qall"
#     nvim --headless -c "MasonInstall ansible-language-server" -c "qall"
#   tags:
#     - neovim
