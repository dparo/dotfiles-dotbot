- defaults:
    link:
      create: true
      relink: true
      glob: false
      force: false
    shell:
      quiet: true
      stdout: false
      stderr: true
    clean:
      force: false

- shell:
    - description: Update submodules
      stdout: false
      stderr: false
      command: |
        source "${USER_DOTFILES_LOCATION:-./}/meta/lib.sh"
        update_submodules

    - description: Update flatpak packages
      stdout: false
      stderr: false
      command: |
        flatpak update -y

    - description: Update to latest Kitty terminal
      stdout: false
      stderr: false
      command: |
        curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin dest="$HOME/opt" launch=n
        ln -sf ~/opt/kitty.app/bin/kitty ~/.local/bin/
        cp -f ~/opt/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
        cp -f ~/opt/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/
        sed -i "s|Icon=kitty|Icon=/home/$USER/opt/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop
        sed -i "s|Exec=kitty|Exec=/home/$USER/opt/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop

    - description: Install/Update PIP3 packages
      stdout: false
      stderr: false
      command: |
        # Update pip3 packages
        pip3 list --user --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip3 install -U

        pip3 install -U numpy matplotlib pandas plotly
        pip3 install -U i3ipc neovim-remote pynvim tmuxp autorandr
        pip3 install -U streamlink spotdl
        pip3 install -U ansible-lint

        # Packages for development

        pip3 install -U pycodestyle flake8 autopep8 autoflake \
          black yapf \
          pylint mypy pyre-check \
          'python-lsp-server[all]' pylsp-mypy pyls-isort pyls-black python-lsp-black pyls-memestra \
          jedi jedi-language-server \
          rope \
          debugpy \
          codespell cmakelang cmake-language-server gitlint vim-vint proselint \
          httpie

        pip3 cache purge


    - description: Install/Update NPM packages
      stdout: false
      stderr: false
      command: |
        # Update all installed modules first
        npm update -g

        npm install -g neovim tree-sitter-cli
        npm install -g typescript @types/node ts-node eslint prettier
        npm install -g gramma     # Command line grammar checker: Checks markdown files against the `https://languagetool.org/` api, or by hosting languagetool locally
        npm install -g @marp-team/marp-cli  # Presentation mode for markdown files. Support conversions to HTML interactive presentations (through electron) or native static PDF presentations.


        # A flexible JSON/YAML linter for creating automated style guides, with baked in support for OpenAPI v3.1, v3.0, and v2.0 as well as AsyncAPI v2.x.
        npm install -g @stoplight/spectral-cli

    - description: Install/Update GO packages
      stdout: false
      stderr: false
      command: |
        # Lazygit: https://github.com/jesseduffield/lazygit
        # simple terminal UI for git commands
        go install github.com/jesseduffield/lazygit@latest

        # pprof: https://github.com/google/pprof
        # pprof is a tool for visualization and analysis of profiling data.
        go install github.com/google/pprof@latest

        # The program ensures source code files have copyright license headers by
        # scanning directory patterns recursively.
        # It modifies all source files in place and
        # avoids adding a license header to any file that already has one.
        go install github.com/google/addlicense@latest

        # Slides presentation in the terminal from Markdown
        go install github.com/maaslalani/slides@latest

    - description: Update CARGO and RUST (including installed packages)
      stdout: false
      stderr: false
      command: |
        rustup update
        rustup component add rust-src
        rustup component add rustfmt
        rustup component add clippy
        rustup toolchain add nightly

        # Update all rust pkgs
        source "${USER_DOTFILES_LOCATION:-./}/meta/lib.sh"
        update_rust_pkgs


    - description: Update DENO
      stdout: flse
      stderr: false
      command: |
        if which deno; then
          deno upgrade
        fi

    - description: Install NVIM lsp-servers, formatters, diagnostics tools
      stdout: false
      stderr: false
      command: |
        nvim --headless -c "MasonInstall vim-language-server stylua lua-language-server" -c "qall"
        nvim --headless -c "MasonInstall bash-language-server" -c "qall"
        nvim --headless -c "MasonInstall pyright" -c "qall"
        nvim --headless -c "MasonInstall rust-analyzer" -c "qall"
        nvim --headless -c "MasonInstall shellcheck shellharden shfmt" -c "qall"
        nvim --headless -c "MasonInstall typescript-language-server" -c "qall"
        nvim --headless -c "MasonInstall eslint-lsp prettier" -c "qall"
        nvim --headless -c "MasonInstall json-lsp yamllint yaml-language-server" -c "qall"
        nvim --headless -c "MasonInstall texlab write-good proselint" -c "qall"
        nvim --headless -c "MasonInstall sqlfluff" -c "qall"
        nvim --headless -c "MasonInstall jdtls java-debug-adapter java-test" -c "qall"
        nvim --headless -c "MasonInstall ltex-ls" -c "qall"
        nvim --headless -c "MasonInstall ansible-language-server" -c "qall"
